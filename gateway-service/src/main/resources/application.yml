server:
  netty:
    connection-timeout: 20s
    idle-timeout: 15s
  shutdown: graceful
  forward-headers-strategy: framework

spring:
  application:
    name: gateway
  lifecycle:
    timeout-per-shutdown-phase: 15s
  cloud:
    bootstrap:
      enabled: true
    loadbalancer:
      ribbon:
        enabled: false
    gateway:
      httpclient:
        connect-timeout: 2000 # 2s
        response-timeout: 20s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - SaveSession
        - TokenRelay
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin Access-Control-Request-Headers, RETAIN_FIRST
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
      globalcors:
        add-to-simple-url-handler-mapping: true
        corsConfigurations:
          '[/**]':
            allowedOriginPatterns: "*"
            allowedMethods: "*"
            allowedHeaders: "*"
            allowCredentials: true
      discovery:
        locator:
          enabled: true
      routes:
        - id: user
          uri: ${USER_SERVICE_URL:http://localhost:9001}
          predicates:
            - Path=/user/**
          filters:
            - RewritePath=/user/(?<path>.*), /$\{path}
            - name: CircuitBreaker
              args:
                name: userCircuitBreaker
                fallbackUri: forward:/stock-fallback

        - id: product
          uri: ${PRODUCT_SERVICE_URL:http://localhost:9002}
          predicates:
            - Path=/product/**
          filters:
            - RewritePath=/product/(?<path>.*), /$\{path}
            - name: CircuitBreaker
              args:
                name: productCircuitBreaker
                fallbackUri: forward:/stock-fallback

        - id: order
          uri: ${ORDER_SERVICE_URL:http://localhost:9004}
          predicates:
            - Path=/order/**
          filters:
            - RewritePath=/order/(?<path>.*), /$\{path}
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
                fallbackUri: forward:/stock-fallback

        - id: customer
          uri: ${CUSTOMER_SERVICE_URL:http://localhost:9005}
          predicates:
            - Path=/customer/**
          filters:
            - RewritePath=/customer/(?<path>.*), /$\{path}
            - name: CircuitBreaker
              args:
                name: customerCircuitBreaker
                fallbackUri: forward:/stock-fallback

        - id: restaurant
          uri: ${RESTAURANT_SERVICE_URL:http://localhost:9006}
          predicates:
            - Path=/restaurant/**
          filters:
            - RewritePath=/restaurant/(?<path>.*), /$\{path}
            - name: CircuitBreaker
              args:
                name: restaurantCircuitBreaker
                fallbackUri: forward:/stock-fallback

        - id: food-ordering
          uri: ${FOOD_ORDERING_SERVICE_URL:http://localhost:9007}
          predicates:
            - Path=/food-ordering/**
          filters:
            - RewritePath=/food-ordering/(?<path>.*), /$\{path}
            - name: CircuitBreaker
              args:
                name: foodOrderingCircuitBreaker
                fallbackUri: forward:/stock-fallback

  redis:
    connect-timeout: 20s
    host: localhost
    port: 6379
    timeout: 20s
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: stock:gateway

  keycloak:
    server-url: http://localhost:8080
    server-external-url: http://localhost:8080
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${spring.keycloak.server-external-url}/realms/stock-realm
          jwk-set-uri: ${spring.keycloak.server-url}/realms/stock-realm/protocol/openid-connect/certs

jwt:
  auth:
    converter:
      resource-id: stock-app
      principal-attribute: preferred_username

stock-app:
  base-url: http://localhost:9000
  redirect-url: ${stock-app.base-url}/*

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s

logging:
  group:
    circuitbreaker: io.github.resilience4j, org.springframework.cloud.circuitbreaker
  pattern: 
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
    console: "%d{yyyy-MM-dd HH:mm:ss} ${LOG_LEVEL_PATTERN:-%5p} %m%n"
  level:
    circuitbreaker: info
    org.springframework.cloud.kubernetes: TRACE

info:
  system: Gateway Service

management:
  endpoints:
    web:
      exposure:
        include: bindings, configprops, env, flyway, functions, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

springdoc:
  enable-native-support: true
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    # groups-order: DESC
    path: /
    config-url: /v3/api-docs/swagger-config
    urls:
      # - url: /v3/api-docs
      #   name: API Gateway Service
      #   primaryName: API Gateway Service
      - url: /user/v3/api-docs
        name: User Service
      - url: /product/v3/api-docs
        name: Product Service
      - url: /order/v3/api-docs
        name: Order Service
      - url: /customer/v3/api-docs
        name: Customer Service
      - url: /restaurant/v3/api-docs
        name: Restaurant Service
      - url: /food-ordering/v3/api-docs
        name: Food Ordering Service